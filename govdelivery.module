<?php

/**
 * Implements hook_permission().
 */
function govdelivery_permission() {
  return array(
    'Manage GovDelivery Settings' => array(
      'title' => t('Manage GovDelivery Settings'),
      'description' => t('Manage GovDelivery Accounts, Service Endpoints, Enable/Disable Cron Events, Enable/Disable Queuing, Send Test Messages/Subscriptions, Manage the Mail Queue'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function govdelivery_menu() {
  $items['admin/config/services/govdelivery'] = array(
    'title' => 'GovDelivery Settings',
    'description' => 'Settings for GovDelivery to connect with the GovDelivery ODM and Subscription service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_settings'),
    'access arguments' => array('Manage GovDelivery Settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/govdelivery/test'] = array(
    'title' => 'GovDelivery Settings Test - Messages',
    'description' => 'Test sending messages through Drupal correctly route to the GovDelivery service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_settings'),
    'access arguments' => array('Manage GovDelivery Settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/govdelivery/test_subscriptions'] = array(
    'title' => 'GovDelivery Settings Test - Subscriptions',
    'description' => 'Test signup process for GovDelivery Subscription services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_subscriptions'),
    'access arguments' => array('Manage GovDelivery Settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/govdelivery_message_queue'] = array(
    'title' => 'GovDelivery Message Queue',
    'description' => 'View current items in the message queue.',
    'page callback' => 'govdelivery_message_queue_report',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery Settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/govdelivery_message_queue/details'] = array(
    'title' => 'GovDelivery Message Details',
    'description' => 'Details of a queued messaged',
    'page callback' => 'govdelivery_details',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery Settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_mail().
 *
 *  @TODO Move to the admin code file.
 */
function govdelivery_mail($key, &$message, $params) {
  $message['subject'] = 'GovDelivery test message';
  if (isset($_SERVER['HTTP_HOST'])) {
    $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);
    if (drupal_valid_http_host($_SERVER['HTTP_HOST'])) {
      $message['subject'] = 'GovDelivery test message: ' . $_SERVER['HTTP_HOST'];
    }
  }
  $message['body'] = "This is a test message from the GovDelivery system";
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_cron() {
  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  $govdelivery_odm_settings = variable_get('govdelivery_odm_settings', array());

  // If subscriptions cron is Enabled
  if (isset($govdelivery_subscription_settings['cron_subscriptions']) && $govdelivery_subscription_settings['cron_subscriptions']) {
    $messages_sent = govdelivery_process_subscription_queue();
  }

  // If subscriptions cron is Enabled
  if (isset($govdelivery_odm_settings['cron_odm']) && $govdelivery_odm_settings['cron_odm']) {
    $items_sent = govdelivery_process_message_queue();
  }
}

// Helper function when calling subscribe from the queue run
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_queued_subscribe($item) {
  return govdelivery_subscribe($item['code'], $item['email'], TRUE);
}

// Subscribe a user to a list via webservice
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_subscribe($list_code, $email, $from_queue = FALSE) {
  // Check the initial prototype input.
  if (is_null($list_code) || empty($list_code)) {
    watchdog('govdelivery', 'Supplied list code is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  if (is_null($email) || empty($email)) {
    watchdog('govdelivery', 'Supplied email is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // Prototype input is good now lets check the settings.
  $request =  array(
    'code' => $list_code,
    'email' => $email,
  );
  $key = md5(print_r($request, TRUE) . microtime() . strval(rand()));

  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  if (is_null($govdelivery_subscription_settings) || empty($govdelivery_subscription_settings)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Settings for subscribing this user are not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // General settings exist, check the specific settings we need.
  $service_url = $govdelivery_subscription_settings['service_url'];
  if (is_null($service_url) || empty($service_url)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Service URL for subscribing this user is not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Settings are valid now send the request.
  $request_url = url($service_url, array('query' => $request));
  $response = drupal_http_request($request_url);

  // The response is well-formed XML, but seems pretty heavyweight to parse as XML,
  // we're better off with a simple regex match
  $matches = array();
  preg_match("/<response code='(\d+)' message=[',\"](.*)[',\"]><\/response>/", $response->data, $matches);
  $result_code = $matches[1];
  $message = $matches[2];

  // If the response code in the response header from govdelivery is anything other then 200
  // there is something seriously wrong with this request and we should consider it malicious.
  // It also doesn't help that GovDelivery isn't sending back a standard response like the
  // other error codes.
  if ($response->code != '200') {
    watchdog('govdelivery', 'Error subscribing - Email: %email List: %list The response from GovDelivery was not 200 meaning this request is probably malicious. This subscription will not be queued.',
      array('%email' => $request['email'], '%list' => $request['code']), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // In the future we should be able to switch this to key off of $response->code but until then we need to keep parsing.
  switch ($result_code) {
    case "200":
      watchdog('govdelivery', 'Subscribed Email: %email to List: %list', array('%email' => $request['email'], '%list' => $request['code']), WATCHDOG_INFO);
      return TRUE;
      break;
    case "404":
    case "414":
    case "500":
      watchdog('govdelivery', 'Error subscribing - Email: %email List: %list Response: %response Message: %message; Item will not be queued.',
        array('%email' => $request['email'], '%list' => $request['code'], '%response' => $result_code, '%message' => $message), WATCHDOG_ERROR);
      // Return TRUE to remove something from the queue
      if ($from_queue) {
        return TRUE;
      }
      return FALSE;
      break;
    default:
      if (!$from_queue) {
        govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
      }
      watchdog('govdelivery', 'Error subscribing - Email:  %email List: %list Response: %response Message: %message; Item will be queued.',
        array('%email' => $request['email'], '%list' => $request['code'], '%response' => $result_code, '%message' => $message), WATCHDOG_ERROR);
      return FALSE;
      break;

  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_process_message_queue($messages = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  $messages_sent = govdelivery_process_queue('govdelivery_message_queue', 'govdelivery_send_message', $messages, $ignore_max_time, $cid);
  watchdog('govdelivery', 'Sent %messages messages when processing the govdelivery messsage queue.', array('%messages' => $messages_sent), WATCHDOG_INFO);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_process_subscription_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  $subscriptions = govdelivery_process_queue('govdelivery_subscription_queue', 'govdelivery_queued_subscribe', $items, $ignore_max_time, $cid);
  watchdog('govdelivery', 'Subscribed %subscriptions emails when processing the govdelivery subscription queue.', array('%subscriptions' => $subscriptions), WATCHDOG_INFO);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_process_queue($queue, $callback, $items = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  // checks for maximum execution time cribbed from the job_queue module: drupal.org/project/job_queue
  $max_execution_time = ini_get('max_execution_time');
  if (!$ignore_max_time && empty($max_execution_time)) {
    $max_execution_time = 5 * 60;
  }

  $start_time = (timer_read('page') / 1000);

  // setting a simple semaphore to avoid parallelism issues
  $semaphore = variable_get('govdelivery_semaphore', FALSE);
  if ($semaphore) {
    watchdog('govdelivery', 'Attempting to re-run govdelivery queue processing while it is already running.', array(), WATCHDOG_WARNING);
    return FALSE;
  }
  else {
    // in case we are aborted, register a shutdown callback
    register_shutdown_function('govdelivery_process_queue_cleanup');
    $items_sent = 0;

    // TODO Please convert this statement to the D7 database API syntax.
    //$cache_queue = db_query("SELECT cid FROM {" . $queue . "} ORDER BY created ASC");
    $query = db_select($queue, 'q');
    $query->fields('q', array('cid'));
    $query->orderBy('q.created');
    $cache_queue = $query->execute();

    foreach ($cache_queue as $queue_key) {
    //while ($queue_key = db_fetch_object($cache_queue)) {
      // check our status against the maximum execution time for a request, and if we've used half of it we want to
      // stop processing - it was formerly checking whether half the time was used, rather than whether we had used
      // half of it in this module
      if (!$ignore_max_time && ( ((timer_read('page') / 1000) - $start_time ) > ($max_execution_time / 2))) {
        watchdog('govdelivery', 'Half of the available PHP execution time of %max_execution_time has been use processing the GovDelivery queue and processing will not continue.',
          array('%max_execution_time' => $max_execution_time), WATCHDOG_WARNING);
        break; // Stop once we have used over half of the maximum execution time
      }

      $i = $queue_key->cid;
      // Only send one message from the queue if a cid is passed in
      // If the cid is null or blank process the queue as normal
      if ((!empty($cid) && $i == $cid) || (empty($cid))) {
        // get the most recently cached item
        $item = govdelivery_queue_get($queue, $i);
        // if this item is still in the cache
        if ($item) {
          // resend the item
          // add a callback
          $status = call_user_func_array($callback, array($item) );
          if ($status) {
            govdelivery_queue_remove($queue, $i);
            $items_sent++;
          }
        }
      }
      if (isset($items) && ( $items_sent >= $items )) {
        break; // break if we've sent the requested number of items
      }
    }

    variable_set('govdelivery_semaphore', REQUEST_TIME);
    variable_del('govdelivery_semaphore');
    return $items_sent;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_process_queue_cleanup() {
  if (variable_get('govdelivery_semaphore', FALSE)) {
    watchdog('govdelivery', 'GovDelivery queue processing was aborted unexpectedly.  This could mean that the maximum execution time was exceeded or an uncaught exception occured in SOAP processing.', array(), WATCHDOG_WARNING);

    // Release cron semaphore
    variable_del('govdelivery_semaphore');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_queue_get($queue, $cid) {
  global $user;

  $query = db_select($queue, 'q');
  $query->fields('q', array('data', 'created', 'expire', 'serialized'));
  $query->condition('q.cid', $cid);
  $result = $query->execute();

  $message = $result->fetchObject();
  //$message = db_fetch_object(db_query("SELECT data, created, headers, expire, serialized FROM {" . $queue . "} WHERE cid = '%s'", $cid));
  if (isset($message->data) && !empty($message->data)) {
    $message->data = unserialize($message->data);
    return $message->data;
  }
  return FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_queue_set($queue, $cid, $data) {
  $serialized = 0;
  if (is_object($data) || is_array($data)) {
    $data = serialize($data);
    $serialized = 1;
  }

  $created = REQUEST_TIME;
  //db_query("UPDATE {" . $queue . "} SET data = %b, created = %d, serialized = %d WHERE cid = '%s'", $data, $created, $serialized, $cid);
  try {
    $query = db_update($queue);
    $query->fields(array(
        'data' => $data,
        'created' => $created,
        'serialized' => $serialized,
      ));
    $query->condition('cid', $cid);
    $num_updated = $query->execute();

    if ($num_updated <= 0) {
      //@db_query("INSERT INTO {" . $queue . "} (cid, data, created, serialized) VALUES ('%s', %b, %d, %d)", $cid, $data, $created, $serialized);
      db_insert($queue)
        ->fields(array(
          'cid' => $cid,
          'data' => $data,
          'created' => $created,
          'serialized' => $serialized,
        ))
        ->execute();
    }
  }
  catch (Exception $e) {
    watchdog('govdelivery', 'Queue Set Error: @e', array('@e' => $e->getMessage()), WATCHDOG_NOTICE);
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_queue_remove($queue, $cid) {
  global $user;
  //db_query("DELETE FROM {" . $queue . "} WHERE cid = '%s'", $cid);
  db_delete($queue)
    ->condition('cid', $cid)
    ->execute();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_send_message($message) {
  $govdelivery_odm_settings = variable_get('govdelivery_odm_settings', array());

  if (class_exists('SoapClient')) {
    $email = new odmService($govdelivery_odm_settings['server']);

    $ODMmessage = new ODMMessage();

    // Basically this is saying that a to list can be either an array
    // or a comma seperated values list.
    // If it is an array each array item may still be a command seperated list
    // So we need to parse the comma seperated list of each array element.
    // If it is not initially an array then we need to check for a comma seperated list
    // only once and then proceede.
    // Its really weird but its possible.
    $recipients = array();
    if (is_array($message["to"])) {
      foreach ($message["to"] as $address) {
        $tolist = explode(',', $address);
        if (is_array($tolist)) {
          $filtered_list = array_map("govdelivery_filter_email", $tolist);
          $recipients = array_merge($recipients, $filtered_list);
        }
        else {
          $recipients[] = govdelivery_filter_email($tolist);
        }
      }
    }
    else {
      $tolist = explode(',', $message["to"]);
      if (is_array($tolist)) {
        $filtered_list = array_map("govdelivery_filter_email", $tolist);
        $recipients = array_merge($recipients, $filtered_list);
      }
      else {
        $recipients[] = govdelivery_filter_email($tolist);
      }
    }

    $ODMmessage->to = (array) $recipients;

    // Check account mappings from the settings file.
    // @todo fix this so that a checkbox can select the default account in the admin area
    $account_map = variable_get("govdelivery_account_map", NULL);
    $account = (isset($account_map[$message['id']]) ? $account_map[$message['id']] : $account_map['default']);
    if (!isset($account) || empty($account)) {
      watchdog('govdelivery', 'No default account specified.  Check settings.php.', NULL, WATCHDOG_ERROR);
      return FALSE;
    }

    $ODMmessage->fromName = $govdelivery_odm_settings['accounts'][$account]['fromname'];
    $ODMmessage->userName = $account;
    $ODMmessage->password = $govdelivery_odm_settings['accounts'][$account]['password'];

    // check for XML/XHTML or oldstyle html
    $xml_start = strpos(trim($message["body"]), "<?xml");
    $html_start = strpos(trim($message["body"]), "<html");

    // GovDelivery doesn't let us set the MIME type, it will send as text/html ... wrap with <pre> to
    // allow for clean formatting if message isn't XML or HTML already
    if ($xml_start === 0 && $html_start === 0) {
      $ODMmessage->body = $message["body"];
    }
    else {
      $ODMmessage->body = '<pre>' . $message["body"] . '</pre>';
    }
    $ODMmessage->subject = $message["subject"];
    $ODMmessage->recordDesignator = "email";
    $ODMmessage->emailColumn = "email";

    $status = $email->sendMessage($ODMmessage);

    // @todo Get a full list of ODM response codes.
watchdog('ben', 'send status: ' . var_export($status, TRUE));
    $sendsuccess = FALSE;
    if (isset($status[0])) {
      switch($status[0]) {
        case '0': // Success
          $sendsuccess = TRUE;
          break;
        case '8': // Invalid Email
          $sendsuccess = TRUE; // We return true so that we can trick the queueing system.
          break;
        default:
          $sendsuccess = FALSE;
      }
    }
  }

  if (!$sendsuccess) {
    watchdog('govdelivery', 'The soap client failed to send a message. It will be queued for resend on the next cron run. Message: @m', 
      array('@m' => (isset($status[1]) ? $status[1] : '')), WATCHDOG_WARNING);
  }

  return $sendsuccess;
}

// the user may have put in an address of the form "Full Name" <email@domain.tld> instead of just the address,
// so we want to filter to the right address
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_filter_email($address) {

  // borrowed from the drupal valid_email_address($mail) function
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  // setup an array for the matching expression
  $matches = array();

  // the regex below is adapted from drupal's valid_email_address($mail) function
  preg_match("/$user@($domain|(\[($ipv4|$ipv6)\]))/", $address, $matches);
  return (isset($matches[0]) ? $matches[0] : '');
}

// Send messages immediately or to the queue if enabled.
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_process_message($key, $message) {
  // Check preferences
  $govdelivery_odm_settings = variable_get('govdelivery_odm_settings', array());
  $send_success = FALSE;

  // Attempt to send immediately
  if (isset($govdelivery_odm_settings['queue']) && !$govdelivery_odm_settings['queue']) {
    $send_success = govdelivery_send_message($message);

    if ($send_success) {
      watchdog('govdelivery', 'Successfully sent a message immediately.', array(), WATCHDOG_INFO);
    }
  }

  // Queue the message if:
  // 1. Failure to send immediately
  // 2. Queue preferences haven't been set
  // 3. Queue is enabled
  if (!$send_success) {
    govdelivery_queue_set('govdelivery_message_queue', $key, $message);
  }
}
// End govdelivery_send.


// Implement nagios_info hook to allow enabling/disabling our nagios notifications.
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_nagios_info() {
  return array(
    'name' => 'GovDelivery',
    'id' => 'GovDelivery',
  );
} // End govdelivery_nagios_info.

// Implement nagios() hook to send data about the queue status to nagios.
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_nagios() {
  $table = 'govdelivery_message_queue';

  // Get the user settings.
  $critical_threshold = variable_get('govdelivery_nagios_critical_threshold', 5000);
  $warning_threshold = variable_get('govdelivery_nagios_warning_threshold', 1000);

  // Query for a backlog.
  //$count = db_query('SELECT COUNT(cid) FROM {' . $table . '}')->fetchField();
  $query = db_select($table, 't');
  $query->fields('t', array('cid'));
  $query->countQuery();
  $count = $query->execute();

  if (is_numeric($count) && is_numeric($critical_threshold) && is_numeric($warning_threshold)) {
    if ($count > $critical_threshold) {
      $status = NAGIOS_STATUS_CRITICAL;
      $text = t("GovDelivery has @count backlogged messages in the queue.", array('@count' => $count));
    }
    elseif ($count > $warning_threshold) {
      $status = NAGIOS_STATUS_WARNING;
      $text = t("GovDelivery has @count backlogged messages in the queue.", array('@count' => $count));
    }
    else {
      $status = NAGIOS_STATUS_OK;
      $text = '';
    }
  }
  else {
    $status = NAGIOS_STATUS_UNKNOWN;
    $text = t("GovDelivery can't determine the queue status");
  }

  return array(
    'key' => 'GovDelivery',
    'data' => array(
      'status' => $status,
      'type' => 'state',
      'text' => $text,
    ),
  );
}
// End govdelivery_nagios.

// Add settings to the nagios configuration page.
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function govdelivery_nagios_settings() {
  $form = array(
    'GovDelivery' => array(
      'govdelivery_nagios_critical_threshold' => array(
        '#type' => 'textfield',
        '#title' => t('Critical Threshold'),
        '#default_value' => variable_get('govdelivery_nagios_critical_threshold', 5000),
        '#description' => t('Issue a critical alert when GovDelivery has this number of messages queued. (Make this greater then the warning number)'),
      ),
      'govdelivery_nagios_warning_threshold' => array(
        '#type' => 'textfield',
        '#title' => t('Warning Threshold'),
        '#default_value' => variable_get('govdelivery_nagios_warning_threshold', 1000),
        '#description' => t('Issue a warning alert when GovDelivery has this number of messages queued. (Make this less then the critical alert number)'),
      ),
    ),
  );
  return $form;
}
