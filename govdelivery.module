<?php
/**
 * @file
 * GovDelivery TMS module.
 */

/**
 * Implements hook_perm().
 */
function govdelivery_perm() {
  return array('Manage GovDelivery settings');
}

/**
 * Implements hook_menu().
 */
function govdelivery_menu() {
  $items['admin/settings/govdelivery'] = array(
    'title' => 'GovDelivery settings',
    'description' => 'Settings for GovDelivery to connect with the GovDelivery TMS and Subscription service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_settings'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/govdelivery/test'] = array(
    'title' => 'GovDelivery settings test - messages',
    'description' => 'Test sending messages through Drupal correctly route to the GovDelivery service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_settings'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/govdelivery/test_subscriptions'] = array(
    'title' => 'GovDelivery settings test - subscriptions',
    'description' => 'Test signup process for GovDelivery subscription services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_subscriptions'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/govdelivery_message_queue'] = array(
    'title' => 'GovDelivery message queue',
    'description' => 'View current items in the message queue.',
    'page callback' => 'govdelivery_message_queue_report',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/govdelivery_message_queue/details'] = array(
    'title' => 'GovDelivery message details',
    'description' => 'Details of a queued messaged',
    'page callback' => 'govdelivery_details',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function govdelivery_mail($key, &$message, $params) {
  $message['subject'] = 'GovDelivery test message';
  if (isset($_SERVER['HTTP_HOST'])) {
    $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);
    if (drupal_valid_http_host($_SERVER['HTTP_HOST'])) {
      $message['subject'] = 'GovDelivery test message: ' . $_SERVER['HTTP_HOST'];
    }
  }
  $message['body'] = "This is a test message from the GovDelivery system";
}

/**
 * Implements hook_cron().
 *
 * @todo This is likely broken or limited.
 */
function govdelivery_cron() {
  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());

  // If subscriptions cron is Enabled.
  if (isset($govdelivery_subscription_settings['cron_subscriptions']) && $govdelivery_subscription_settings['cron_subscriptions']) {
    $messages_sent = govdelivery_process_subscription_queue();
  }

  // If subscriptions cron is Enabled.
  if (isset($govdelivery_tms_settings['cron_tms']) && $govdelivery_tms_settings['cron_tms']) {
    $items_sent = govdelivery_process_message_queue();
  }
}

/**
 * Helper function when calling subscribe from the queue run.
 */
function govdelivery_queued_subscribe($item) {
  return govdelivery_subscribe($item['code'], $item['email'], TRUE);
}

/**
 * Subscribe a user to a list via webservice.
 */
function govdelivery_subscribe($list_code, $email, $from_queue = FALSE) {
  // Check the initial prototype input.
  if (is_null($list_code) || empty($list_code)) {
    watchdog('govdelivery', 'Supplied list code is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  if (is_null($email) || empty($email)) {
    watchdog('govdelivery', 'Supplied e-mail is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // Prototype input is good now lets check the settings.
  $request = array('code' => $list_code, 'email' => $email);
  $key = md5(print_r($request, TRUE) . microtime() . strval(rand()));

  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  if (is_null($govdelivery_subscription_settings) || empty($govdelivery_subscription_settings)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Settings for subscribing this user are not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // General settings exist, check the specific settings we need.
  $service_url = $govdelivery_subscription_settings['service_url'];
  if (is_null($service_url) || empty($service_url)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Service URL for subscribing this user is not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Settings are valid now send the request.
  $request_url = url($service_url, array('query' => $request));
  $response = drupal_http_request($request_url);

  // The response is well-formed XML, but seems pretty heavyweight to
  // parse as XML, we're better off with a simple regex match.
  $matches = array();
  preg_match("/<response code='(\d+)' message=[',\"](.*)[',\"]><\/response>/", $response->data, $matches);
  $result_code = $matches[1];
  $message = $matches[2];

  // If the response code in the response header from govdelivery is
  // anything other then 200 there is something seriously wrong with
  // this request and we should consider it malicious. It also doesn't help
  // that GovDelivery isn't sending back a standard response like the
  // other error codes.
  if ($response->code != '200') {
    watchdog('govdelivery', 'Error subscribing - Email: %email List: %list The response from GovDelivery was not 200 meaning this request is probably malicious. This subscription will not be queued.',
      array('%email' => $request['email'], '%list' => $request['code']), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // In the future we should be able to switch this to key off of
  // $response->code but until then we need to keep parsing.
  switch ($result_code) {
    case "200":
      watchdog('govdelivery', 'Subscribed e-mail: %email to list: %list', array('%email' => $request['email'], '%list' => $request['code']), WATCHDOG_INFO);
      return TRUE;

    case "404":
    case "414":
    case "500":
      watchdog('govdelivery', 'Error subscribing - e-mail: %email list: %list Response: %response Message: %message; Item will not be queued.',
        array(
          '%email' => $request['email'],
          '%list' => $request['code'],
          '%response' => $result_code,
          '%message' => $message,
        ), WATCHDOG_ERROR);
      // Return TRUE to remove something from the queue.
      if ($from_queue) {
        return TRUE;
      }
      return FALSE;

    default:
      if (!$from_queue) {
        govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
      }
      watchdog('govdelivery', 'Error subscribing - Email:  %email List: %list Response: %response Message: %message; Item will be queued.',
        array(
          '%email' => $request['email'],
          '%list' => $request['code'],
          '%response' => $result_code,
          '%message' => $message,
        ), WATCHDOG_ERROR);
      return FALSE;
  }
}

/**
 * Process the message queue.
 *
 * @param array $messages
 *   Message list.
 * @param bool $ignore_max_time
 *   Ignore max time.
 * @param string $cid
 *   CID
 */
function govdelivery_process_message_queue($messages = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  $messages_sent = govdelivery_process_queue('govdelivery_message_queue', 'govdelivery_send_message', $messages, $ignore_max_time, $cid);
  watchdog('govdelivery', 'Sent %messages messages when processing the govdelivery messsage queue.', array('%messages' => $messages_sent), WATCHDOG_INFO);
}

/**
 * Process the subscription queue.
 *
 * @param array $items
 *   Subscription items.
 * @param bool $ignore_max_time
 *   Ignore max time.
 * @param string $cid
 *   CID
 */
function govdelivery_process_subscription_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  $subscriptions = govdelivery_process_queue('govdelivery_subscription_queue', 'govdelivery_queued_subscribe', $items, $ignore_max_time, $cid);
  watchdog('govdelivery', 'Subscribed %subscriptions emails when processing the govdelivery subscription queue.', array('%subscriptions' => $subscriptions_processed), WATCHDOG_INFO);
}

/**
 * Process a general queue.
 *
 * @param string $queue
 *   Name of queue to process.
 * @param string $callback
 *   Callback function.
 * @param array $items
 *   Subscription items.
 * @param bool $ignore_max_time
 *   Ignore max time.
 * @param string $cid
 *   CID
 */
function govdelivery_process_queue($queue, $callback, $items = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  // Checks for maximum execution time cribbed from the job_queue
  // module: drupal.org/project/job_queue.
  $max_execution_time = ini_get('max_execution_time');
  if (!$ignore_max_time && empty($max_execution_time)) {
    $max_execution_time = 5 * 60;
  }

  $start_time = (timer_read('page') / 1000);

  // Setting a simple semaphore to avoid parallelism issues.
  $semaphore = variable_get('govdelivery_semaphore', FALSE);
  if ($semaphore) {
    watchdog('govdelivery', 'Attempting to re-run GovDelivery queue processing while it is already running.', array(), WATCHDOG_WARNING);
    return FALSE;
  }
  else {
    // In case we are aborted, register a shutdown callback.
    register_shutdown_function('govdelivery_process_queue_cleanup');
    $items_sent = 0;

    $cache_queue = db_query("SELECT cid FROM {" . $queue . "} ORDER BY created ASC");

    while ($queue_key = db_fetch_object($cache_queue)) {
      // Check our status against the maximum execution time for a
      // request, and if we've used half of it we want to stop
      // processing - it was formerly checking whether half the time was
      // used, rather than whether we had used half of it in this module.
      if (!$ignore_max_time && (((timer_read('page') / 1000) - $start_time) > ($max_execution_time / 2))) {
        watchdog('govdelivery', 'Half of the available PHP execution time of %max_execution_time has been use processing the GovDelivery queue and processing will not continue.',
          array('%max_execution_time' => $max_execution_time), WATCHDOG_WARNING);
        // Stop once we have used over half of the maximum execution time.
        break;
      }

      $i = $queue_key->cid;
      // Only send one message from the queue if a cid is passed in
      // If the cid is null or blank process the queue as normal.
      if ((!empty($cid) && $i == $cid) || (empty($cid))) {
        // Get the most recently cached item.
        $item = govdelivery_queue_get($queue, $i);
        // If this item is still in the cache.
        if ($item) {
          // Resend the item. Add a callback.
          $status = call_user_func_array($callback, array($item));
          if ($status) {
            govdelivery_queue_remove($queue, $i);
            $items_sent++;
          }
        }
      }
      if (isset($items) && ($items_sent >= $items)) {
        // Break if we've sent the requested number of items.
        break;
      }
    }

    variable_set('govdelivery_semaphore', time());
    variable_del('govdelivery_semaphore');
    return $items_sent;
  }
}

/**
 * Cleanup process queue.
 */
function govdelivery_process_queue_cleanup() {
  if (variable_get('govdelivery_semaphore', FALSE)) {
    watchdog('govdelivery', 'GovDelivery queue processing was aborted unexpectedly.  This could mean that the maximum execution time was exceeded or an uncaught exception occured in SOAP processing.', array(), WATCHDOG_WARNING);

    // Release cron semaphore.
    variable_del('govdelivery_semaphore');
  }
}

/**
 * Get data from queue.
 */
function govdelivery_queue_get($queue, $cid) {
  global $user;

  $message = db_fetch_object(db_query("SELECT data, created, headers, expire, serialized FROM {" . $queue . "} WHERE cid = '%s'", $cid));
  if (isset($message->data)) {
    // If the data is permanent or we're not enforcing a minimum cache lifetime
    // always return the cached data.
    $message->data = db_decode_blob($message->data);
    if ($message->serialized) {
      $message->data = unserialize($message->data);
    }
    return $message->data;
  }
  return 0;
}

/**
 * Set data into the queue.
 */
function govdelivery_queue_set($queue, $cid, $data) {
  $serialized = 0;
  if (is_object($data) || is_array($data)) {
    $data = serialize($data);
    $serialized = 1;
  }
  $created = time();
  db_query("UPDATE {" . $queue . "} SET data = %b, created = %d, serialized = %d WHERE cid = '%s'", $data, $created, $expire, $headers, $serialized, $cid);
  if (!db_affected_rows()) {
    @db_query("INSERT INTO {" . $queue . "} (cid, data, created, serialized) VALUES ('%s', %b, %d, %d)", $cid, $data, $created, $serialized);
  }
}

/**
 * Remove an item from the queue.
 */
function govdelivery_queue_remove($queue, $cid) {
  global $user;
  db_query("DELETE FROM {" . $queue . "} WHERE cid = '%s'", $cid);
}

/**
 * Send a message.
 *
 * @param array $message
 *   A message.
 */
function govdelivery_send_message($message) {
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  $sendsuccess = TRUE;

  # Get list of recipients.
  $recipients = array();
  if (is_array($message["to"])) {
    foreach ($message["to"] as $address) {
      $tolist = explode(',', $address);
      if (is_array($tolist)) {
        $filtered_list = array_map("govdelivery_filter_email", $tolist);
        $recipients = array_merge($recipients, $filtered_list);
      }
      else {
        $recipients[] = govdelivery_filter_email($tolist);
      }
    }
  }
  else {
    $tolist = explode(',', $message["to"]);
    if (is_array($tolist)) {
      $filtered_list = array_map("govdelivery_filter_email", $tolist);
      $recipients = array_merge($recipients, $filtered_list);
    }
    else {
      $recipients[] = govdelivery_filter_email($tolist);
    }
  }

  # Check which account is mapped.
  $account = $govdelivery_tms_settings['default_username'];
  if (!isset($account) || empty($account)) {
    watchdog('govdelivery', "No default account specified.  Check 'Default mail username' in admin/settings/govdelivery.", NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  $from_address = $govdelivery_tms_settings['accounts'][$account]['fromname'];
  if (isset($govdelivery_tms_settings['override_from']) && !empty($govdelivery_tms_settings['override_from'])) {
    if (!empty($message['from'])) {
      $from_address = $message['from'];
    }
  }

  $message_data = array(
    'body' => $message['body'],
    'from_name' => $from_address,
    'subject' => $message["subject"],
    'recipients' => array()
  );
  foreach ($recipients as $recipient) {
    $message_data['recipients'][] = array('email' => $recipient);
  }
  $data = json_encode($message_data);
  $auth_token = $govdelivery_tms_settings['auth_token'];
  $headers = array('Content-Type' => 'application/json', 'X-AUTH-TOKEN' => $auth_token);

  $server = $govdelivery_tms_settings['server'];
  $result = drupal_http_request($server . '/messages/email', $headers, 'POST', $data);
  // HTTP code for this?
  if ($result->code == 200 or $result->code == 201) {
    $send_success = TRUE;
  }
  else {
    watchdog('govdelivery', 'Exception: Error in sending email: %error', array('%error' => $result->code), WATCHDOG_ERROR);
    $sendsuccess = FALSE;
  }

  return $sendsuccess;
}

/**
 * Filter user email.
 *
 * The user may have put in an address of the form
 * "Full Name" <email@domain.tld> instead of just the address,
 * so we want to filter to the right address.
 */
function govdelivery_filter_email($address) {
  // Borrowed from the drupal valid_email_address($mail) function.
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  // Setup an array for the matching expression.
  $matches = array();

  // This regex is adapted from drupal's valid_email_address($mail) function.
  preg_match("/$user@($domain|(\[($ipv4|$ipv6)\]))/", $address, $matches);
  return (isset($matches[0]) ? $matches[0] : '');
}

/**
 * Send messages immediately or to the queue if enabled.
 */
function govdelivery_process_message($key, $message) {
  // Check preferences.
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  $send_success = FALSE;

  // Attempt to send immediately.
  if (isset($govdelivery_tms_settings['queue']) && !$govdelivery_tms_settings['queue']) {
    $send_success = govdelivery_send_message($message);

    if ($send_success) {
      watchdog('govdelivery', 'Successfully sent a message immediately.', array(), WATCHDOG_INFO);
    }
  }

  // Queue the message if:
  // 1. Failure to send immediately.
  // 2. Queue preferences haven't been set.
  // 3. Queue is enabled.
  if (!$send_success) {
    govdelivery_queue_set('govdelivery_message_queue', $key, $message);
  }
}

/**
 * Implements hook_nagios_info().
 *
 * To allow enabling/disabling our nagios notifications.
 */
function govdelivery_nagios_info() {
  return array(
    'name' => 'GovDelivery',
    'id' => 'GovDelivery',
  );
}

/**
 * Implements hook_nagios().
 *
 * To send data about the queue status to nagios.
 */
function govdelivery_nagios() {
  $table = 'govdelivery_message_queue';

  // Get the user settings.
  $critical_threshold = variable_get('govdelivery_nagios_critical_threshold', 5000);
  $warning_threshold = variable_get('govdelivery_nagios_warning_threshold', 1000);

  // Query for a backlog.
  $count = db_result(db_query('SELECT COUNT(cid) FROM {' . $table . '}'));

  if (is_numeric($count) && is_numeric($critical_threshold) && is_numeric($warning_threshold)) {
    if ($count > $critical_threshold) {
      $status = NAGIOS_STATUS_CRITICAL;
      $text = t("GovDelivery has @count backlogged messages in the queue.", array('@count' => $count));
    }
    elseif ($count > $warning_threshold) {
      $status = NAGIOS_STATUS_WARNING;
      $text = t("GovDelivery has @count backlogged messages in the queue.", array('@count' => $count));
    }
    else {
      $status = NAGIOS_STATUS_OK;
      $text = '';
    }
  }
  else {
    $status = NAGIOS_STATUS_UNKNOWN;
    $text = t("GovDelivery can't determine the queue status");
  }

  return array(
    'key' => 'GovDelivery',
    'data' => array(
      'status' => $status,
      'type' => 'state',
      'text' => $text,
    ),
  );
}

/**
 * Add settings to the nagios configuration page.
 */
function govdelivery_nagios_settings() {
  $form = array(
    'GovDelivery' => array(
      'govdelivery_nagios_critical_threshold' => array(
        '#type' => 'textfield',
        '#title' => t('Critical threshold'),
        '#default_value' => variable_get('govdelivery_nagios_critical_threshold', 5000),
        '#description' => t('Issue a critical alert when GovDelivery has this number of messages queued. (Make this greater then the warning number)'),
      ),
      'govdelivery_nagios_warning_threshold' => array(
        '#type' => 'textfield',
        '#title' => t('Warning threshold'),
        '#default_value' => variable_get('govdelivery_nagios_warning_threshold', 1000),
        '#description' => t('Issue a warning alert when GovDelivery has this number of messages queued. (Make this less then the critical alert number)'),
      ),
    ),
  );
  return $form;
}
